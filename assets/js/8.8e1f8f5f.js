(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{363:function(r,n,a){"use strict";a.r(n);var t=a(41),e=Object(t.a)({},(function(){var r=this,n=r.$createElement,a=r._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":r.$parent.slotKey}},[a("h2",{attrs:{id:"冒泡排序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#冒泡排序"}},[r._v("#")]),r._v(" 冒泡排序")]),r._v(" "),a("p",[r._v("//比较相邻的元素,最后的元素会是最大的数。")]),r._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[r._v("    function bubbleSort(arr) {\n        let len = arr.length;\n        for (let i = 0; i < len - 1; i++) {\n            for (let j = 0; j < len - 1 - i; j++) {\n                if (arr[j] > arr[j+1]) {        // 相邻元素两两对比\n                    [arr[j], arr[j+1]] = [arr[j+1], arr[j]]\n                }\n            }\n        }\n        return arr;\n    }\n")])])]),a("h2",{attrs:{id:"选择排序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#选择排序"}},[r._v("#")]),r._v(" 选择排序")]),r._v(" "),a("p",[r._v("//把最小的选到最前面")]),r._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[r._v("    function selectionSort(arr) {\n        let len = arr.length;\n        let minIndex;\n        for (let i = 0; i < len - 1; i++) {\n            minIndex = i;\n            for (let j = i + 1; j < len; j++) {\n                if (arr[j] < arr[minIndex]) {     // 寻找最小的数\n                    minIndex = j;                 // 记录最小数索引\n                }\n            }\n            [arr[minIndex], arr[i]] = [arr[i], arr[minIndex]]\n        }\n        return arr;\n    }\n")])])]),a("h2",{attrs:{id:"插入排序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#插入排序"}},[r._v("#")]),r._v(" 插入排序")]),r._v(" "),a("p",[r._v("//捡扑克牌")]),r._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[r._v("    function insertSort(arr) {\n        for(let i = 1; i < arr.length; i++) {   // 外循环从1开始，默认arr[0]是有序段\n            for(let j = i; j > 0; j--) {        // j = i,将arr[j]依次插入有序段中\n                if(arr[j] < arr[j-1]) {\n                    [arr[j], arr[j-1]] = [arr[j-1], arr[j]];\n                } else {\n                    break; // 证明有序，退出循环\n                }\n            }\n        }\n        return arr;\n    }\n")])])]),a("h2",{attrs:{id:"快速排序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#快速排序"}},[r._v("#")]),r._v(" 快速排序")]),r._v(" "),a("p",[r._v("// 取数组第一个值为基准值，把比它小的放a数组，大的放b数组。")]),r._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[r._v("    function quickSort(arr) {\n        if (arr.length <= 1) {\n            return arr;  //递归出口\n        }\n        var left = [],\n            right = [],\n    \n            // 1. 注意splice后，数组长度少了一个\n            current = arr.splice(0, 1);         \n    \n            // 2. 取中间值\n            // middle = Math.floor((arr.length - 1) / 2) \n            // current = arr[middle]\n            \n        for (let i = 0; i < arr.length; i++) {\n            arr[i] < current ? left.push(arr[i]) : right.push(arr[i]);\n        }\n    \n        return quickSort(left).concat(current, quickSort(right)); //递归\n    }\n")])])]),a("h2",{attrs:{id:"归并排序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#归并排序"}},[r._v("#")]),r._v(" 归并排序")])])}),[],!1,null,null,null);n.default=e.exports}}]);